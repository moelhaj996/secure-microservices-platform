global:
  enabled: true
  tlsDisable: false

server:
  ha:
    enabled: true
    replicas: 3
  
    # Raft Storage Backend
    raft:
      enabled: true
      setNodeId: true
      config: |
        ui = true
        
        listener "tcp" {
          tls_disable = 1
          address = "[::]:8200"
          cluster_address = "[::]:8201"
        }
        
        storage "raft" {
          path = "/vault/data"
          retry_join {
            leader_api_addr = "http://vault-0.vault-internal:8200"
          }
          retry_join {
            leader_api_addr = "http://vault-1.vault-internal:8200"
          }
          retry_join {
            leader_api_addr = "http://vault-2.vault-internal:8200"
          }
        }
        
        service_registration "kubernetes" {}
        
        seal "transit" {
          address = "http://vault.vault.svc:8200"
          disable_renewal = "false"
          key_name = "autounseal"
          mount_path = "transit/"
          tls_skip_verify = "true"
        }
  
  resources:
    requests:
      memory: 256Mi
      cpu: 250m
    limits:
      memory: 512Mi
      cpu: 500m

  extraEnvironmentVars:
    VAULT_ADDR: "https://127.0.0.1:8200"
    VAULT_API_ADDR: "https://$(POD_IP):8200"
    VAULT_CLUSTER_ADDR: "https://$(POD_IP):8201"
    
  affinity:
    podAntiAffinity:
      requiredDuringSchedulingIgnoredDuringExecution:
        - labelSelector:
            matchLabels:
              app.kubernetes.io/name: vault
              app.kubernetes.io/instance: vault
          topologyKey: kubernetes.io/hostname

  auditStorage:
    enabled: true
    size: "10Gi"
    storageClass: "standard"
    accessMode: "ReadWriteOnce"

  standalone:
    enabled: false

  serviceAccount:
    create: true
    name: "vault"
    annotations: {}

  service:
    enabled: true

  dataStorage:
    enabled: true
    size: 10Gi
    storageClass: null
    accessMode: ReadWriteOnce

  securityContext:
    runAsNonRoot: true
    runAsUser: 100
    runAsGroup: 1000
    fsGroup: 1000

ui:
  enabled: true
  serviceType: "ClusterIP"
  serviceNodePort: null
  externalPort: 8200

injector:
  enabled: true
  replicas: 1
  
  resources:
    requests:
      memory: 64Mi
      cpu: 50m
    limits:
      memory: 128Mi
      cpu: 100m
      
  securityContext:
    runAsNonRoot: true
    runAsUser: 65534
    runAsGroup: 65534
    fsGroup: 65534

# Vault CSI Provider
csi:
  enabled: true

  metrics:
    enabled: true

  failurePolicy: Fail

  authPath: "auth/kubernetes"

  logLevel: "info"

  webhookAnnotations:
    "security.istio.io/tlsMode": "istio"

  affinity:
    podAntiAffinity:
      requiredDuringSchedulingIgnoredDuringExecution:
        - labelSelector:
            matchLabels:
              app.kubernetes.io/name: vault-agent-injector
              app.kubernetes.io/instance: vault
          topologyKey: kubernetes.io/hostname

  extraVolumes:
    - type: secret
      name: vault-tls
      path: /vault/tls

  config: |
    ui = true
    
    listener "tcp" {
      tls_disable = 0
      address = "[::]:8200"
      cluster_address = "[::]:8201"
      tls_cert_file = "/vault/tls/tls.crt"
      tls_key_file  = "/vault/tls/tls.key"
      tls_client_ca_file = "/vault/tls/ca.crt"
    }

    storage "raft" {
      path = "/vault/data"
      retry_join {
        leader_api_addr = "https://vault-0.vault-internal:8200"
      }
      retry_join {
        leader_api_addr = "https://vault-1.vault-internal:8200"
      }
      retry_join {
        leader_api_addr = "https://vault-2.vault-internal:8200"
      }
    }

    service_registration "kubernetes" {}

    seal "transit" {
      address = "https://vault.vault.svc:8200"
      token = "s.token"
      disable_renewal = "false"
      key_name = "autounseal"
      mount_path = "transit/"
    }

    telemetry {
      prometheus_retention_time = "30s"
      disable_hostname = true
    } 